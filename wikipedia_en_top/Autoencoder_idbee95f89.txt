Autoencoder
An autoencoder is a type of artificial neural network used to learn efficient codings of unlabeled data (unsupervised learning). The encoding is validated and refined by attempting to regenerate the input from the encoding. The autoencoder learns a representation (encoding) for a set of data, typically for dimensionality reduction, by training the network to ignore insignificant data (“noise”).
Variants exist, aiming to force the learned representations to assume useful properties. Examples are regularized autoencoders (Sparse, Denoising and Contractive), which are effective in learning representations for subsequent classification tasks, and Variational autoencoders, with applications as generative models. Autoencoders are applied to many problems, including facial recognition, feature detection, anomaly detection and acquiring the meaning of words. Autoencoders are also generative models which can randomly generate new data that is similar to the input data (training data).
Mathematical principles
Definition

An autoencoder is defined by the following components: 
For any $MATH$, we usually write $MATH$, and refer to it as the code, the latent variable, latent representation, latent vector, etc. Conversely, for any $MATH$, we usually write $MATH$, and refer to it as the (decoded) message.
Usually, both the encoder and the decoder are defined as multilayer perceptrons. For example, a one-layer-MLP encoder $MATH$ is:
where $MATH$ is an element-wise activation function such as a sigmoid function or a rectified linear unit, $MATH$ is a matrix called "weight", and $MATH$ is a vector called "bias".
Training an autoencoder
An autoencoder, by itself, is simply a tuple of two functions. To judge its quality, we need a task. A task is defined by a reference probability distribution $MATH$ over $MATH$, and a "reconstruction quality" function $MATH$, such that $MATH$ measures how much $MATH$ differs from $MATH$.


With those, we can define the loss function for the autoencoder as
The optimal autoencoder for the given task $MATH$ is then $MATH$. The search for the optimal autoencoder can be accomplished by any mathematical optimization technique, but usually by gradient descent. This search process is referred to as "training the autoencoder".

In most situations, the reference distribution is just the empirical distribution given by a dataset $MATH$, so that


and the quality function is just L2 loss: $MATH$. Then the problem of searching for the optimal autoencoder is just a least-squares optimization:
Interpretation
An autoencoder has two main parts: an encoder that maps the message to a code, and a decoder that reconstructs the message from the code. An optimal autoencoder would perform as close to perfect reconstruction as possible, with "close to perfect" defined by the reconstruction quality function $MATH$.
The simplest way to perform the copying task perfectly would be to duplicate the signal. To suppress this behavior, the code space $MATH$ usually has fewer dimensions than the message space $MATH$.
Such an autoencoder is called undercomplete. It can be interpreted as compressing the message, or reducing its dimensionality.
At the limit of an ideal undercomplete autoencoder, every possible code $MATH$ in the code space is used to encode a message $MATH$ that really appears in the distribution $MATH$, and the decoder is also perfect: $MATH$. This ideal autoencoder can then be used to generate messages indistinguishable from real messages, by feeding its decoder arbitrary code $MATH$ and obtaining $MATH$, which is a message that really appears in the distribution $MATH$.
If the code space $MATH$ has dimension larger than (overcomplete), or equal to, the message space $MATH$, or the hidden units are given enough capacity, an autoencoder can learn the identity function and become useless. However, experimental results found that overcomplete autoencoders might still learn useful features.
In the ideal setting, the code dimension and the model capacity could be set on the basis of the complexity of the data distribution to be modeled. A standard way to do so is to add modifications to the basic autoencoder, to be detailed below.
History
The autoencoder has also been called the autoassociator, or Diabolo network. Its first applications date to the 1980s. Their most traditional application was dimensionality reduction or feature learning, but the concept became widely used for learning generative models of data. Some of the most powerful AIs in the 2010s involved autoencoders stacked inside deep neural networks.
Variations
Regularized autoencoders
Various techniques exist to prevent autoencoders from learning the identity function and to improve their ability to capture important information and learn richer representations.
Sparse autoencoder (SAE)

Inspired by the sparse coding hypothesis in neuroscience, sparse autoencoders are variants of autoencoders, such that the codes $MATH$ for messages tend to be sparse codes, that is, $MATH$ is close to zero in most entries. Sparse autoencoders may include more (rather than fewer) hidden units than inputs, but only a small number of the hidden units are allowed to be active at the same time. Encouraging sparsity improves performance on classification tasks. 
There are two main ways to enforce sparsity. One way is to simply clamp all but the highest-k activations of the latent code to zero. This is the k-sparse autoencoder.


The k-sparse autoencoder inserts the following "k-sparse function" in the latent layer of a standard autoencoder:
where $MATH$ if $MATH$ ranks in the top k, and 0 otherwise.
Backpropagating through $MATH$ is simple: set gradient to 0 for $MATH$ entries, and keep gradient for $MATH$ entries. This is essentially a generalized ReLU function.


The other way is a relaxed version of the k-sparse autoencoder. Instead of forcing sparsity, we add a sparsity regularization loss, then optimize for
where $MATH$ measures how much sparsity we want to enforce.
Let the autoencoder architecture have $MATH$ layers. To define a sparsity regularization loss, we need a "desired" sparsity $MATH$ for each layer, a weight $MATH$ for how much to enforce each sparsity, and a function $MATH$ to measure how much two sparsities differ.


For each input $MATH$, let the actual sparsity of activation in each layer $MATH$ be
where $MATH$ is the activation in the $MATH$ -th neuron of the $MATH$ -th layer upon input $MATH$.

The sparsity loss upon input $MATH$ for one layer is $MATH$, and the sparsity regularization loss for the entire autoencoder is the expected weighted sum of sparsity losses:
Typically, the function $MATH$ is either the Kullback-Leibler (KL) divergence, as
or the L1 loss, as $MATH$, or the L2 loss, as $MATH$.


Alternatively, the sparsity regularization loss may be defined without reference to any "desired sparsity", but simply force as much sparsity as possible. In this case, one can sparsity regularization loss as 
where $MATH$ is the activation vector in the $MATH$-th layer of the autoencoder. The norm $MATH$ is usually the L1 norm (giving the L1 sparse autoencoder) or the L2 norm (giving the L2 sparse autoencoder).
Denoising autoencoder (DAE)
Denoising autoencoders (DAE) try to achieve a good representation by changing the reconstruction criterion.
A DAE is defined by adding a noise process to the standard autoencoder. A noise process is defined by a probability distribution $MATH$ over functions $MATH$. That is, the function $MATH$ takes a message $MATH$, and corrupts it to a noisy version $MATH$. The function $MATH$ is selected randomly, with a probability distribution $MATH$.


Given a task $MATH$, the problem of training a DAE is the optimization problem:
That is, the optimal DAE should take any noisy message and attempt to recover the original message without noise, thus the name "denoising".
Usually, the noise process $MATH$ is applied only during training and testing, not during downstream use.
The use of DAE depends on two assumptions:
Example noise processes include:
Contractive autoencoder (CAE)

A contractive autoencoder adds the contractive regularization loss to the standard autoencoder loss:
where $MATH$ measures how much contractive-ness we want to enforce. The contractive regularization loss itself is defined as the expected Frobenius norm of the Jacobian matrix of the encoder activations with respect to the input:
To understand what $MATH$ measures, note the fact
for any message $MATH$, and small variation $MATH$ in it. Thus, if $MATH$ is small, it means that a small neighborhood of the message maps to a small neighborhood of its code. This is a desired property, as it means small variation in the message leads to small, perhaps even zero, variation in its code, like how two pictures may look the same even if they are not exactly the same.
The DAE can be understood as an infinitesimal limit of CAE: in the limit of small Gaussian input noise, DAEs make the reconstruction function resist small but finite-sized input perturbations, while CAEs make the extracted features resist infinitesimal input perturbations.
Concrete autoencoder
The concrete autoencoder is designed for discrete feature selection. A concrete autoencoder forces the latent space to consist only of a user-specified number of features. The concrete autoencoder uses a continuous relaxation of the categorical distribution to allow gradients to pass through the feature selector layer, which makes it possible to use standard backpropagation to learn an optimal subset of input features that minimize reconstruction loss.
Variational autoencoder (VAE)
Variational autoencoders (VAEs) belong to the families of variational Bayesian methods. Despite the architectural similarities with basic autoencoders, VAEs are architecture with different goals and with a completely different mathematical formulation. The latent space is in this case composed by a mixture of distributions instead of a fixed vector.
Given an input dataset $MATH$ characterized by an unknown probability function $MATH$ and a multivariate latent encoding vector $MATH$, the objective is to model the data as a distribution $MATH$, with $MATH$ defined as the set of the network parameters so that $MATH$.
Advantages of depth
Autoencoders are often trained with a single layer encoder and a single layer decoder, but using many-layered (deep) encoders and decoders offers many advantages.
Training
Geoffrey Hinton developed the deep belief network technique for training many-layered deep autoencoders. His method involves treating each neighbouring set of two layers as a restricted Boltzmann machine so that pretraining approximates a good solution, then using backpropagation to fine-tune the results.
Researchers have debated whether joint training (i.e. training the whole architecture together with a single global reconstruction objective to optimize) would be better for deep auto-encoders. A 2015 study showed that joint training learns better data models along with more representative features for classification as compared to the layerwise method. However, their experiments showed that the success of joint training depends heavily on the regularization strategies adopted.
Applications
The two main applications of autoencoders are dimensionality reduction and information retrieval, but modern variations have been applied to other tasks.
Dimensionality reduction
Dimensionality reduction was one of the first deep learning applications.
For Hinton's 2006 study, he pretrained a multi-layer autoencoder with a stack of RBMs and then used their weights to initialize a deep autoencoder with gradually smaller hidden layers until hitting a bottleneck of 30 neurons. The resulting 30 dimensions of the code yielded a smaller reconstruction error compared to the first 30 components of a principal component analysis (PCA), and learned a representation that was qualitatively easier to interpret, clearly separating data clusters.
Representing dimensions can improve performance on tasks such as classification. Indeed, the hallmark of dimensionality reduction is to place semantically related examples near each other.
Principal component analysis
If linear activations are used, or only a single sigmoid hidden layer, then the optimal solution to an autoencoder is strongly related to principal component analysis (PCA). The weights of an autoencoder with a single hidden layer of size $MATH$ (where $MATH$ is less than the size of the input) span the same vector subspace as the one spanned by the first $MATH$ principal components, and the output of the autoencoder is an orthogonal projection onto this subspace. The autoencoder weights are not equal to the principal components, and are generally not orthogonal, yet the principal components may be recovered from them using the singular value decomposition.
However, the potential of autoencoders resides in their non-linearity, allowing the model to learn more powerful generalizations compared to PCA, and to reconstruct the input with significantly lower information loss.
Information retrieval
Information retrieval benefits particularly from dimensionality reduction in that search can become more efficient in certain kinds of low dimensional spaces. Autoencoders were indeed applied to semantic hashing, proposed by Salakhutdinov and Hinton in 2007. By training the algorithm to produce a low-dimensional binary code, all database entries could be stored in a hash table mapping binary code vectors to entries. This table would then support information retrieval by returning all entries with the same binary code as the query, or slightly less similar entries by flipping some bits from the query encoding.
Anomaly detection
Another application for autoencoders is anomaly detection. By learning to replicate the most salient features in the training data under some of the constraints described previously, the model is encouraged to learn to precisely reproduce the most frequently observed characteristics. When facing anomalies, the model should worsen its reconstruction performance. In most cases, only data with normal instances are used to train the autoencoder; in others, the frequency of anomalies is small compared to the observation set so that its contribution to the learned representation could be ignored. After training, the autoencoder will accurately reconstruct "normal" data, while failing to do so with unfamiliar anomalous data. Reconstruction error (the error between the original data and its low dimensional reconstruction) is used as an anomaly score to detect anomalies.
Recent literature has however shown that certain autoencoding models can, counterintuitively, be very good at reconstructing anomalous examples and consequently not able to reliably perform anomaly detection.
Image processing
The characteristics of autoencoders are useful in image processing.
One example can be found in lossy image compression, where autoencoders outperformed other approaches and proved competitive against JPEG 2000.
Another useful application of autoencoders in image preprocessing is image denoising.
Autoencoders found use in more demanding contexts such as medical imaging where they have been used for image denoising as well as super-resolution. In image-assisted diagnosis, experiments have applied autoencoders for breast cancer detection and for modelling the relation between the cognitive decline of Alzheimer's disease and the latent features of an autoencoder trained with MRI.
Drug discovery
In 2019 molecules generated with variational autoencoders were validated experimentally in mice.
Popularity prediction
Recently, a stacked autoencoder framework produced promising results in predicting popularity of social media posts, which is helpful for online advertising strategies.
Machine translation
Autoencoders have been applied to machine translation, which is usually referred to as neural machine translation (NMT). Unlike traditional autoencoders, the output does not match the input - it is in another language. In NMT, texts are treated as sequences to be encoded into the learning procedure, while on the decoder side sequences in the target language(s) are generated. Language-specific autoencoders incorporate further linguistic features into the learning procedure, such as Chinese decomposition features. Machine translation is rarely still done with autoencoders, but rather transformer networks.