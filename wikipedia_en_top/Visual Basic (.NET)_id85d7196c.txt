Visual Basic (.NET)
Visual Basic, originally called Visual Basic .NET (VB.NET), is a multi-paradigm, object-oriented programming language, implemented on .NET, Mono, and the .NET Framework. Microsoft launched VB.NET in 2002 as the successor to its original Visual Basic language, the last version of which was Visual Basic 6.0. Although the ".NET" portion of the name was dropped in 2005, this article uses "Visual Basic [.NET]" to refer to all Visual Basic languages released since 2002, in order to distinguish between them and the classic Visual Basic. Along with C# and F#, it is one of the three main languages targeting the .NET ecosystem. As of March 11, 2020, Microsoft announced that evolution of the VB.NET language has concluded.
Microsoft's integrated development environment (IDE) for developing in Visual Basic is Visual Studio. Most Visual Studio editions are commercial; the only exceptions are Visual Studio Express and Visual Studio Community, which are freeware. In addition, the .NET Framework SDK includes a freeware command-line compiler called vbc.exe. Mono also includes a command-line VB.NET compiler.
Visual Basic is often used in conjunction with the Windows Forms GUI library to make desktop apps for Windows. Programming for Windows Forms with Visual Basic involves dragging and dropping controls on a form using a GUI designer and writing corresponding code for each control.
Syntax
Visual Basic uses statements to specify actions. The most common statement is an expression statement, consisting of an expression to be evaluated, on a single line. As part of that evaluation, functions or subroutines may be called and variables may be assigned new values. To modify the normal sequential execution of statements, Visual Basic provides several control-flow statements identified by reserved keywords. Structured programming is supported by several constructs including two conditional execution constructs (If ... Then ... Else ... End If and  Select Case ...  Case ...  End Select ) and three iterative execution (loop) constructs (Do ... Loop, For ... To, and For Each) . The For ... To statement has separate initialisation and testing sections, both of which must be present. (See examples below.) The For Each statement steps through each value in a list.
In addition, in Visual Basic:
Simple example
The following is a very simple Visual Basic program, a version of the classic "Hello, World!" example created as a console application:
It prints "Hello, World!" on a command-line window.  Each line serves a specific purpose, as follows:
This is a module definition. Modules are a division of code, which can contain any kind of object, like constants or variables, functions or methods, or classes, but can't be instantiated as objects like classes and cannot inherit from other modules. Modules serve as containers of code that can be referenced from other parts of a program.It is common practice for a module and the code file which contains it to have the same name. However, this is not required, as a single code file may contain more than one module and/or class.
This line defines a subroutine called "Main". "Main" is the entry point, where the program begins execution.
This line performs the actual task of writing the output. Console is a system object, representing a command-line interface (also known as a "console") and granting programmatic access to the operating system's standard streams.  The program calls the Console method WriteLine, which causes the string passed to it to be displayed on the console.
Instead of Console.WriteLine, one could use MsgBox, which prints the message in a dialog box instead of a command-line window.
Complex example
This piece of code outputs Floyd's Triangle to the console:
Comparison with the classic Visual Basic
Whether Visual Basic .NET should be considered as just another version of Visual Basic or a completely different language is a topic of debate. There are new additions to support new features, such as structured exception handling and short-circuited expressions. Also, two important data-type changes occurred with the move to VB.NET: compared to Visual Basic 6, the Integer data type has been doubled in length from 16 bits to 32 bits, and the Long data type has been doubled in length from 32 bits to 64 bits. This is true for all versions of VB.NET. A 16-bit integer in all versions of VB.NET is now known as a Short. Similarly, the Windows Forms editor is very similar in style and function to the Visual Basic form editor.
The things that have changed significantly are the semanticsâ€”from those of an object-based programming language running on a deterministic, reference-counted engine based on COM to a fully object-oriented language backed by the .NET Framework, which consists of a combination of the Common Language Runtime (a virtual machine using generational garbage collection and a just-in-time compilation engine) and a far larger class library. The increased breadth of the latter is also a problem that VB developers have to deal with when coming to the language, although this is somewhat addressed by the My feature in Visual Studio 2005.
The changes have altered many underlying assumptions about the "right" thing to do with respect to performance and maintainability. Some functions and libraries no longer exist; others are available, but not as efficient as the "native" .NET alternatives. Even if they compile, most converted Visual Basic 6 applications will require some level of refactoring to take full advantage of the new language. Documentation is available to cover changes in the syntax, debugging applications, deployment and terminology.
Comparative examples
The following simple examples compare VB and VB.NET syntax. They assume that the developer has created a form, placed a button on it and has associated the subroutines demonstrated in each example with the click event handler of the mentioned button. Each example creates a "Hello, World" message box after the button on the form is clicked.
Visual Basic 6:
VB.NET (MsgBox or MessageBox class can be used):
The following example demonstrates a difference between Visual Basic 6 and VB.NET. Both examples close the active window.
Visual Basic 6:
VB.NET:
The 'cmd' prefix is replaced by the 'btn' prefix, conforming to the new convention previously mentioned.
Visual Basic 6 did not provide common operator shortcuts. The following are equivalent:
Visual Basic 6:
VB.NET:
Comparison with C#
C# and Visual Basic are Microsoft's first languages made to program on the .NET Framework (later adding F# and more; others have also added languages). Though C# and Visual Basic are syntactically different, that is where the differences mostly end. Microsoft developed both of these languages to be part of the same .NET Framework development platform.  They are both developed, managed, and supported by the same language development team at Microsoft.  They compile to the same intermediate language (IL), which runs against the same .NET Framework runtime libraries.  Although there are some differences in the programming constructs, their differences are primarily syntactic and, assuming one avoids the Visual Basic "Compatibility" libraries provided by Microsoft to aid conversion from Visual Basic 6, almost every feature in VB has an equivalent feature in C# and vice versa.  Lastly, both languages reference the same Base Classes of the .NET Framework to extend their functionality.   As a result, with few exceptions, a program written in either language can be run through a simple syntax converter to translate to the other.  There are many open source and commercially available products for this task.
Examples
Windows Forms Application

Requires a button called Button1.
Windows Forms Application

Requires a TextBox titled 'TextBox1' and a button called Button1.
Version history
Succeeding the classic Visual Basic version 6.0, the first version of Visual Basic .NET debuted in 2002. As of 2020, ten versions of Visual Basic .NET are released.
2002 (VB 7.0)
The first version, Visual Basic .NET, relies on .NET Framework 1.0. The most important feature is managed code, which contrasts with the classic Visual Basic.
2003 (VB 7.1)
Visual Basic .NET 2003 was released with .NET Framework 1.1. New features included support for the .NET Compact Framework and a better VB upgrade wizard. Improvements were also made to the performance and reliability of .NET IDE (particularly the background compiler) and runtime. In addition, Visual Basic .NET 2003 was available in the Visual Studio.NET Academic Edition, distributed to a certain number of scholars from each country without cost.
2005 (VB 8.0)
After Visual Basic .NET 2003, Microsoft dropped ".NET" from the name of the product, calling the next version Visual Basic 2005.
For this release, Microsoft added many features intended to reinforce Visual Basic .NET's focus as a rapid application development platform and further differentiate it from C#., including:
To bridge the gaps between itself and other .NET languages, this version added:
Visual Basic 2005 introduced the IsNot operator that makes 'If X IsNot Y' equivalent to 'If Not X Is Y'. It gained notoriety when it was found to be the subject of a Microsoft patent application.
2008 (VB 9.0)
Visual Basic 9.0 was released along with .NET Framework 3.5 on November 19, 2007.
For this release, Microsoft added many features, including:
2010 (VB 10.0)
In April 2010, Microsoft released Visual Basic 2010. Microsoft had planned to use Dynamic Language Runtime (DLR) for that release but shifted to a co-evolution strategy between Visual Basic and sister language C# to bring both languages into closer parity with one another. Visual Basic's innate ability to interact dynamically with CLR and COM objects has been enhanced to work with dynamic languages built on the DLR such as IronPython and IronRuby. The Visual Basic compiler was improved to infer line continuation in a set of common contexts, in many cases removing the need for the " _" line continuation characters. Also, existing support of inline Functions was complemented with support for inline Subs as well as multi-line versions of both Sub and Function lambdas.
2012 (VB 11.0)
Visual Basic 2012 was released alongside .NET Framework 4.5. Major features introduced in this version include:
2013 (VB 12.0)
Visual Basic 2013 was released alongside .NET Framework 4.5.1 with Visual Studio 2013. Can also build .NET Framework 4.5.2 applications by installing Developer Pack.
2015 (VB 14.0)
Visual Basic 2015 (code named VB "14.0") was released with Visual Studio 2015. Language features include a new "?." operator to perform inline null checks, and a new string interpolation feature is included to format strings inline.
2017 (VB 15.x)
Visual Basic 2017 (code named VB "15.0") was released with Visual Studio 2017.
Extends support for new Visual Basic 15 language features with revision 2017, 15.3, 15.5, 15.8. Introduces new refactorings that allow organizing source code with one action.
2019 (VB 16.0)
Visual Basic 2019 (code named VB "16.0") was released with Visual Studio 2019. It is the first version of Visual Basic focused on .NET Core.
Cross-platform and open-source development
The official Visual Basic compiler is written in Visual Basic and is available on GitHub as a part of the .NET Compiler Platform. The creation of open-source tools for Visual Basic development has been slow compared to C#, although the Mono development platform provides an implementation of Visual Basic-specific libraries and a Visual Basic 2005 compatible compiler written in Visual Basic, as well as standard framework libraries such as Windows Forms GUI library.
MonoDevelop is an open-source alternative IDE. The Gambas environment is also similar but distinct from Visual Basic.
See also
References
Further reading