Ackermann function

In computability theory, the Ackermann function, named after Wilhelm Ackermann, is one of the simplest and earliest-discovered examples of a total computable function that is not primitive recursive. All primitive recursive functions are total and computable, but the Ackermann function illustrates that not all total computable functions are primitive recursive. After Ackermann's publication of his function (which had three non-negative integer arguments), many authors modified it to suit various purposes, so that today "the Ackermann function" may refer to any of numerous variants of the original function. One common version, the two-argument Ackermann–Péter function is defined as follows for nonnegative integers m and n:
Its value grows rapidly, even for small inputs. For example, A(4, 2) is an integer of 19,729 decimal digits (equivalent to 265536−3, or 22222−3).
History
In the late 1920s, the mathematicians Gabriel Sudan and Wilhelm Ackermann, students of David Hilbert, were studying the foundations of computation. Both Sudan and Ackermann are credited with discovering total computable functions (termed simply "recursive" in some references) that are not primitive recursive. Sudan published the lesser-known Sudan function, then shortly afterwards and independently, in 1928, Ackermann published his function $MATH$ (the Greek letter phi). Ackermann's three-argument function, $MATH$, is defined such that for $MATH$, it reproduces the basic operations of addition, multiplication, and exponentiation as
and for p > 2 it extends these basic operations in a way that can be compared to the hyperoperations:
(Aside from its historic role as a total-computable-but-not-primitive-recursive function, Ackermann's original function is seen to extend the basic arithmetic operations beyond exponentiation, although not as seamlessly as do variants of Ackermann's function that are specifically designed for that purpose—such as Goodstein's hyperoperation sequence.)
In On the Infinite, David Hilbert hypothesized that the Ackermann function was not primitive recursive, but it was Ackermann, Hilbert's personal secretary and former student, who actually proved the hypothesis in his paper On Hilbert's Construction of the Real Numbers.
Rózsa Péter and Raphael Robinson later developed a two-variable version of the Ackermann function that became preferred by almost all authors.
The generalized hyperoperation sequence, e.g. $MATH$, is a version of Ackermann function as well.
In 1963 R.C. Buck based an intuitive two-variable  variant $MATH$ on the hyperoperation sequence:
Compared to most other versions Buck's function has no unessential offsets:
Many other versions of Ackermann function have been investigated.
Definition
Definition: as m-ary function
Ackermann's original three-argument function $MATH$ is defined recursively as follows for nonnegative integers $MATH$ and $MATH$:
Of the various two-argument versions, the one developed by Péter and Robinson (called "the" Ackermann function by most authors) is defined for nonnegative integers $MATH$ and $MATH$ as follows:
The Ackermann function has also been expressed in relation to the hyperoperation sequence:
Definition: as iterated 1-ary function
Define $MATH$ as the n-th iterate of $MATH$:
Iteration is the process of composing a function with itself a certain number of times. Function composition is an associative operation, so $MATH$.
Conceiving the Ackermann function as a sequence of unary functions, one can set $MATH$.
The function then becomes a sequence $MATH$ of unary functions, defined from iteration:
Computation
The recursive definition of the Ackermann function can naturally be transposed to a term rewriting system (TRS).
TRS, based on 2-ary function
The definition of the 2-ary Ackermann function leads to the obvious reduction rules 
Example
Compute $MATH$
The reduction sequence is 
To compute $MATH$ one can use a stack, which initially contains the elements $MATH$.
Then repeatedly the two top elements are replaced according to the rules
Schematically, starting from $MATH$:
The pseudocode is published in Grossman & Zeitman (1988).
For example, on input $MATH$,
Remarks
TRS, based on iterated 1-ary function
The definition of the iterated 1-ary Ackermann functions leads to different reduction rules
As function composition is associative, instead of rule r6 one can define
Like in the previous section the computation of $MATH$ can be implemented with a stack.
Initially the stack contains the three elements $MATH$.
Then repeatedly the three top elements are replaced according to the rules
Schematically, starting from $MATH$:
Example
On input $MATH$ the successive stack configurations are
The corresponding equalities are
When reduction rule r7 is used instead of rule r6, the replacements in the stack will follow
The successive stack configurations will then be
The corresponding equalities are 
Remarks
TRS, based on hyperoperators
As Sundblad (1971) — or Porto & Matos (1980) — showed explicitly, the Ackermann function can be expressed in terms of the hyperoperation sequence:
or, after removal of the constant 2 from the parameter list, in terms of Buck's function
Buck's function $MATH$, a variant of Ackermann function by itself, can be computed with the following reduction rules:
Instead of rule b6 one can define the rule 
To compute the Ackermann function it suffices to add three reduction rules
These rules take care of the base case A(0,n), the alignment (n+3) and the fudge (-3).
Example
Compute $MATH$
The matching equalities are
Remarks
Huge numbers
To demonstrate how the computation of $MATH$ results in many steps and in a large number:
Table of values
Computing the Ackermann function can be restated in terms of an infinite table. First, place the natural numbers along the top row. To determine a number in the table, take the number immediately to the left. Then use that number to look up the required number in the column given by that number and one row up. If there is no number to its left, simply look at the column headed "1" in the previous row. Here is a small upper-left portion of the table:
The numbers here which are only expressed with recursive exponentiation or Knuth arrows are very large and would take up too much space to notate in plain decimal digits.
Despite the large values occurring in this early section of the table, some even larger numbers have been defined, such as Graham's number, which cannot be written with any small number of Knuth arrows. This number is constructed with a technique similar to applying the Ackermann function to itself recursively.
This is a repeat of the above table, but with the values replaced by the relevant expression from the function definition to show the pattern clearly:
Properties
General remarks
Not primitive recursive
The Ackermann function grows faster than any primitive recursive function and therefore is not itself primitive recursive. The sketch of the proof is this: a primitive recursive function defined using up to k recursions must grow slower than $MATH$, the (k+1)-th function in the fast-growing hierarchy, but the Ackermann function grows at least as fast as $MATH$.
Specifically, one shows that to every primitive recursive function $MATH$ there exists a non-negative integer $MATH$ such that for all non-negative integers $MATH$,
Once this is established, it follows that $MATH$ itself is not primitive recursive, since otherwise putting $MATH$ would lead to the contradiction $MATH$
The proof proceeds as follows: define the class $MATH$ of all functions that grow slower than the Ackermann function
and show that $MATH$ contains all primitive recursive functions. The latter is achieved by showing that $MATH$ contains the constant functions, the successor function, the projection functions and that it is closed under the operations of function composition and primitive recursion.
Inverse
Since the function  f(n) = A(n, n) considered above grows very rapidly, its inverse function, f−1, grows very slowly. This inverse Ackermann function f−1 is usually denoted by α. In fact, α(n) is less than 5 for any practical input size n, since A(4, 4) is on the order of $MATH$.
This inverse appears in the time complexity of some algorithms, such as the disjoint-set data structure and Chazelle's algorithm for minimum spanning trees. Sometimes Ackermann's original function or other variations are used in these settings, but they all grow at similarly high rates. In particular, some modified functions simplify the expression by eliminating the −3 and similar terms.
A two-parameter variation of the inverse Ackermann function can be defined as follows, where $MATH$ is the floor function:
This function arises in more precise analyses of the algorithms mentioned above, and gives a more refined time bound. In the disjoint-set data structure, m represents the number of operations while n represents the number of elements; in the minimum spanning tree algorithm, m represents the number of edges while n represents the number of vertices. Several slightly different definitions of α(m, n) exist; for example, log2 n is sometimes replaced by n, and the floor function is sometimes replaced by a ceiling.
Other studies might define an inverse function of one where m is set to a constant, such that the inverse applies to a particular row. 
The inverse of the Ackermann function is primitive recursive.
Use as benchmark
The Ackermann function, due to its definition in terms of extremely deep recursion, can be used as a benchmark of a compiler's ability to optimize recursion. The first published use of Ackermann's function in this way was in 1970 by Dragoș Vaida and, almost simultaneously, in 1971, by Yngve Sundblad.
Sundblad's seminal paper was taken up by Brian Wichmann (co-author of the Whetstone benchmark) in a trilogy of papers written between 1975 and 1982.
See also
Notes